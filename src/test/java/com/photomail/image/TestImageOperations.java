package com.photomail.image;
/*
 * TestPhotoMail.java
 *
 * Created on 24 septembre 2004, 23:00
 */

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;



/**
 *
 * @author  dcr
 */
public class TestImageOperations extends TestCase {


    /**
     * suite method automatically generated by JUnit module
     */
    public static junit.framework.Test suite() {
        junit.framework.TestSuite suite = new junit.framework.TestSuite(TestImageOperations.class);
        return suite;
    }


    BufferedImage img;

    public TestImageOperations(String name) {
        super(name);
    }
    
    public void setUp() throws Exception {
        int w=256;
        int h=128;
        img = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = img.createGraphics();
        g.setBackground(Color.WHITE);
        g.clearRect(0, 0, w, h);
        g.setColor(Color.BLACK);
        String msg = "HELLO WORLD !!!!!";
        
        g.drawChars(msg.toCharArray(), 0, msg.length(), (w-g.getFontMetrics().charsWidth(msg.toCharArray(),0,msg.length()))/2, h/2);
        g.drawOval(  0,   0, w-1, h-1);
        g.setColor(Color.RED);
        g.setBackground(Color.RED);
        g.fillOval(  0,     0, 16, 16);
        g.fillOval(w-17, h-17, 16, 16);
        g.fillOval(  0,  h-17, 16, 16);
        g.fillOval(w-17,    0, 16, 16);        
    }
    
    private void show(String title, BufferedImage img) {
        JFrame jf = new JFrame(title);
        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        JLabel l = new JLabel(new ImageIcon(img));
        jf.getContentPane().add(l);
        jf.pack();
        jf.setVisible(true);
        
    }
    
    public void testRotate() throws Exception {
        int w=img.getWidth();
        int h=img.getHeight();
        Dimension d = ImageOperations.computeRotatedDimension(w, h, Math.PI/2.0);
        assertTrue("Width Must equals to "+h+" not "+d.width, d.width == h);
        assertTrue("Height Must equals to "+w+" not "+d.height, d.height == w);
        
        double a = Math.PI/2.0;
        d = ImageOperations.computeRotatedDimension(w, h, a);
        BufferedImage imgr = ImageOperations.rotate(img, a);
        assertTrue(imgr.getWidth() == d.width);
        assertTrue(imgr.getHeight() == d.height);
        //show("ROTATED", imgr);
    }
    
    public void testResize() throws Exception {
        int w;
        int h;
        BufferedImage i;

        w=img.getWidth()/2; h=img.getHeight()/2;
        i = ImageOperations.resize(img, w, h);
        assertTrue(i.getWidth() == w); assertTrue(i.getHeight() == h);

        w=-1; h=img.getHeight()/2;
        i = ImageOperations.resize(img, w, h);
        assertTrue(""+i.getWidth()+"!="+w, i.getWidth() == img.getWidth()/2); assertTrue(""+i.getHeight()+"!="+h, i.getHeight() == h);

        w=img.getWidth()/2; h=-1;
        i = ImageOperations.resize(img, w, h);
        assertTrue(""+i.getWidth()+"!="+w, i.getWidth() == w); assertTrue(""+i.getHeight()+"!="+h, i.getHeight() == img.getHeight()/2);

        w=img.getWidth()/2; h=img.getHeight();
        i = ImageOperations.resize(img, w, h);
        assertTrue(""+i.getWidth()+"!="+w, i.getWidth() == w); assertTrue(""+i.getHeight()+"!="+h, i.getHeight() == img.getHeight()/2);
        
        w=img.getWidth(); h=img.getHeight()/2;
        i = ImageOperations.resize(img, w, h);
        assertTrue(""+i.getWidth()+"!="+w, i.getWidth() == img.getWidth()/2); assertTrue(""+i.getHeight()+"!="+h, i.getHeight() == h);

    }
    
    public void testReadWrite() throws Exception {
        File f1 = File.createTempFile("tmp_", "jpg");
        File f2 = File.createTempFile("tmp_", "jpg");
        try {
            float compression1 = 0.75f;
            ImageOperations.write(img, f1, compression1);
            float compression2 = 0.50f;
            ImageOperations.write(img, f2, compression2);
            assertTrue(f1.length() > f2.length());
            BufferedImage imgr = ImageOperations.read(f2);
            assertTrue(imgr.getWidth() == img.getWidth());
            assertTrue(imgr.getHeight() == img.getHeight());
            //show("READ", imgr);
        } finally {
            f1.delete();
            f1.delete();
        }
    }
}
